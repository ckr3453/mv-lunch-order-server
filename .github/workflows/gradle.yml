# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
      
    - name: create application-apikey.yml file
      run: |
        cd ./src/main/resources
        touch ./application-apikey.yml
        echo "${{ secrets.APIKEY_YML }}" >> ./application-apikey.yml

    - name: create application-release.yml file
      run: |
        cd ./src/main/resources
        touch ./application-release.yml
        echo "${{ secrets.RELEASE_YML }}" >> ./application-release.yml

    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        arguments: clean bootJar

    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: extract jar before image build
      run: java -Djarmode=tools -jar ./build/libs/${{ secrets.JAR_NAME }} extract --layers --launcher

    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }} .
      
    - name: docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}

  deploy:
    needs: build
    runs-on: [self-hosted, ckr-samsung-laptop]
    steps:
      - name: Github Checkout 
        uses: actions/checkout@v2 
        
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: docker pull and run
        run: |
          ${{ secrets.DOCKER_PULL_AND_RUN_SCRIPT_PATH }}
#          docker stop ${{ github.event.repository.name }}
#          docker rm ${{ github.event.repository.name }}
#          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}
#          docker run -d -p 8099:8088 --name ${{ github.event.repository.name }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest